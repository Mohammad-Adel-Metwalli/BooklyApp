// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:bookly_app/Features/Home/Data/Models/book_model.dart';
import '../../../Features/Home/Data/Models/book_model_access_info.dart';
import '../../../Features/Home/Data/Models/book_model_access_info_epub.dart';
import '../../../Features/Home/Data/Models/book_model_access_info_pdf.dart';
import '../../../Features/Home/Data/Models/book_model_sale_info.dart';
import '../../../Features/Home/Data/Models/book_model_search_info.dart';
import '../../../Features/Home/Data/Models/book_model_volume_info.dart';
import '../../../Features/Home/Data/Models/book_model_volume_info_image_links.dart';
import '../../../Features/Home/Data/Models/book_model_volume_info_industry_identifiers.dart';
import '../../../Features/Home/Data/Models/book_model_volume_info_panelization_summary.dart';
import '../../../Features/Home/Data/Models/book_model_volume_info_reading_modes.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
	static final Map<String, JsonConvertFunction> convertFuncMap = {
		(BookModel).toString(): BookModel.fromJson,
		(BookModelVolumeInfo).toString(): BookModelVolumeInfo.fromJson,
		(BookModelVolumeInfoIndustryIdentifiers).toString(): BookModelVolumeInfoIndustryIdentifiers.fromJson,
		(BookModelVolumeInfoReadingModes).toString(): BookModelVolumeInfoReadingModes.fromJson,
		(BookModelVolumeInfoPanelizationSummary).toString(): BookModelVolumeInfoPanelizationSummary.fromJson,
		(BookModelVolumeInfoImageLinks).toString(): BookModelVolumeInfoImageLinks.fromJson,
		(BookModelSaleInfo).toString(): BookModelSaleInfo.fromJson,
		(BookModelAccessInfo).toString(): BookModelAccessInfo.fromJson,
		(BookModelAccessInfoEpub).toString(): BookModelAccessInfoEpub.fromJson,
		(BookModelAccessInfoPdf).toString(): BookModelAccessInfoPdf.fromJson,
		(BookModelSearchInfo).toString(): BookModelSearchInfo.fromJson,
	};

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<BookModel>[] is M){
			return data.map<BookModel>((Map<String, dynamic> e) => BookModel.fromJson(e)).toList() as M;
		}
		if(<BookModelVolumeInfo>[] is M){
			return data.map<BookModelVolumeInfo>((Map<String, dynamic> e) => BookModelVolumeInfo.fromJson(e)).toList() as M;
		}
		if(<BookModelVolumeInfoIndustryIdentifiers>[] is M){
			return data.map<BookModelVolumeInfoIndustryIdentifiers>((Map<String, dynamic> e) => BookModelVolumeInfoIndustryIdentifiers.fromJson(e)).toList() as M;
		}
		if(<BookModelVolumeInfoReadingModes>[] is M){
			return data.map<BookModelVolumeInfoReadingModes>((Map<String, dynamic> e) => BookModelVolumeInfoReadingModes.fromJson(e)).toList() as M;
		}
		if(<BookModelVolumeInfoPanelizationSummary>[] is M){
			return data.map<BookModelVolumeInfoPanelizationSummary>((Map<String, dynamic> e) => BookModelVolumeInfoPanelizationSummary.fromJson(e)).toList() as M;
		}
		if(<BookModelVolumeInfoImageLinks>[] is M){
			return data.map<BookModelVolumeInfoImageLinks>((Map<String, dynamic> e) => BookModelVolumeInfoImageLinks.fromJson(e)).toList() as M;
		}
		if(<BookModelSaleInfo>[] is M){
			return data.map<BookModelSaleInfo>((Map<String, dynamic> e) => BookModelSaleInfo.fromJson(e)).toList() as M;
		}
		if(<BookModelAccessInfo>[] is M){
			return data.map<BookModelAccessInfo>((Map<String, dynamic> e) => BookModelAccessInfo.fromJson(e)).toList() as M;
		}
		if(<BookModelAccessInfoEpub>[] is M){
			return data.map<BookModelAccessInfoEpub>((Map<String, dynamic> e) => BookModelAccessInfoEpub.fromJson(e)).toList() as M;
		}
		if(<BookModelAccessInfoPdf>[] is M){
			return data.map<BookModelAccessInfoPdf>((Map<String, dynamic> e) => BookModelAccessInfoPdf.fromJson(e)).toList() as M;
		}
		if(<BookModelSearchInfo>[] is M){
			return data.map<BookModelSearchInfo>((Map<String, dynamic> e) => BookModelSearchInfo.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.convert<M>(json);
		}
	}
}